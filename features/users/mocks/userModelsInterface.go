package mocks

import (
	"CleanArchitecture/features/users"
	"github.com/stretchr/testify/mock"
)

// UserModelInterface is an autogenerated mock type for the UserModelInterface type
type UserModelInterface struct {
	mock.Mock
}

// GetAllUsers provides a mock function with given fields:
func (_m *UserModelInterface) GetAllUsers() ([]*users.User, error) {
	ret := _m.Called()

	var r0 []*users.User
	if rf, ok := ret.Get(0).(func() ([]*users.User, error)); ok {
		return rf()
	} else {
		r0 = ret.Get(0).([]*users.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		return r0, rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields:
func (_m *UserModelInterface) Register(newData users.User) (*users.User, error) {
	ret := _m.Called(newData)

	var r0 *users.User
	if rf, ok := ret.Get(0).(func(users.User) (*users.User, error)); ok {
		return rf(newData)
	} else {
		r0 = ret.Get(0).(*users.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(users.User) error); ok {
		return r0, rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields:
func (_m *UserModelInterface) Login(hp string, password string) (*users.User, error) {
	ret := _m.Called(hp, password)

	var r0 *users.User
	if rf, ok := ret.Get(0).(func(string, string) (*users.User, error)); ok {
		return rf(hp, password)
	} else {
		r0 = ret.Get(0).(*users.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		return r0, rf(hp, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func NewUserModelInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserModelInterface {
	mock := &UserModelInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
